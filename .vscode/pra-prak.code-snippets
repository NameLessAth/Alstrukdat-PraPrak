{
	// Place your Pra-Prak workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	/*

	// library

	*/
	"pra-prak snippet": {
		"prefix": "!praprak",
		"body": [
		  "#include <stdio.h>",
		  "#include <stdlib.h>",
		  "#include <math.h>",
		  "#define max(a, b) (a < b ? b : a)",
		  "#define min(a, b) ((a > b) ? b : a)",
		  "#define mod 1e9 + 7",
		  "#define FOR(a, c) for (int (a) = 0; (a) < (c); (a)++)",
		  "#define FORL(a, b, c) for (int (a) = (b); (a) < (c); (a)++)",
		  "#define FORR(a, b, c) for (int (a) = (b); (a) > (c); (a)--)",
		  "#define INF 1000000000000000003",
		  "#define WHIT(a, b) while (a == b)",
		  "#define WHIF(a, b) while (a != b)",
		  "#define cyka scanf",
		  "#define blyat printf",
		  "typedef int in;",
		  "typedef long long int ll;",
		  "typedef unsigned long long int ull;"
		],
		"description": "competitive"
	  }
}